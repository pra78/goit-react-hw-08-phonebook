{"version":3,"file":"static/js/231.9d87c16a.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.styled.jsx","redux/contacts/selectors.js","../node_modules/@chakra-ui/layout/dist/chunk-B2MGPQRJ.mjs","../node_modules/@chakra-ui/layout/dist/chunk-P74GIWPW.mjs","../node_modules/@chakra-ui/object-utils/dist/chunk-R3DH46PF.mjs","components/ContactForm/ContactForm.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","components/ContactList/ContactList.styled.jsx","../node_modules/@chakra-ui/layout/dist/chunk-5FO2ZLZM.mjs","../node_modules/@chakra-ui/breakpoint-utils/dist/chunk-G72KV6MB.mjs","../node_modules/@chakra-ui/layout/dist/chunk-QJDVAY5Z.mjs","../node_modules/@chakra-ui/card/dist/chunk-4DHADF5X.mjs","../node_modules/@chakra-ui/card/dist/chunk-S432VF2S.mjs","../node_modules/@chakra-ui/card/dist/chunk-KKEJMMX3.mjs","components/ContactList/ContactList.jsx","pages/Contacts.js"],"sourcesContent":["import styled from '@emotion/styled';\nimport { Input } from '@chakra-ui/react';\n\nexport const ContactFormStyled = styled.form`\n    /* border: 1px solid black; */\n    /* width: 250px; */\n    /* padding: 10px; */\n    /* box-sizing: border-box; */\n`;\n\nexport const InputStyled = styled(Input)`\n    margin-bottom: 10px;\n`;","export const getContacts = state => state.contacts.items;\nexport const getIsLoading = state => state.contacts.isLoading;\nexport const getError = state => state.contacts.error;\n\nexport const getFilter = state => state.filter.filter;\n","// src/heading.tsx\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  useStyleConfig\n} from \"@chakra-ui/system\";\nimport { cx } from \"@chakra-ui/shared-utils\";\nimport { jsx } from \"react/jsx-runtime\";\nvar Heading = forwardRef(function Heading2(props, ref) {\n  const styles = useStyleConfig(\"Heading\", props);\n  const { className, ...rest } = omitThemingProps(props);\n  return /* @__PURE__ */ jsx(\n    chakra.h2,\n    {\n      ref,\n      className: cx(\"chakra-heading\", props.className),\n      ...rest,\n      __css: styles\n    }\n  );\n});\nHeading.displayName = \"Heading\";\n\nexport {\n  Heading\n};\n","// src/text.tsx\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  useStyleConfig\n} from \"@chakra-ui/system\";\nimport { cx } from \"@chakra-ui/shared-utils\";\nimport { compact } from \"@chakra-ui/object-utils\";\nimport { jsx } from \"react/jsx-runtime\";\nvar Text = forwardRef(function Text2(props, ref) {\n  const styles = useStyleConfig(\"Text\", props);\n  const { className, align, decoration, casing, ...rest } = omitThemingProps(props);\n  const aliasedProps = compact({\n    textAlign: props.align,\n    textDecoration: props.decoration,\n    textTransform: props.casing\n  });\n  return /* @__PURE__ */ jsx(\n    chakra.p,\n    {\n      ref,\n      className: cx(\"chakra-text\", props.className),\n      ...aliasedProps,\n      ...rest,\n      __css: styles\n    }\n  );\n});\nText.displayName = \"Text\";\n\nexport {\n  Text\n};\n","// src/compact.ts\nfunction compact(object) {\n  const clone = Object.assign({}, object);\n  for (let key in clone) {\n    if (clone[key] === void 0)\n      delete clone[key];\n  }\n  return clone;\n}\n\nexport {\n  compact\n};\n","import { toast } from 'react-hot-toast';\nimport { ContactFormStyled, InputStyled } from './ContactForm.styled';\nimport React, { useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\nimport { getContacts } from 'redux/contacts/selectors';\nimport { Button, Heading, Text } from '@chakra-ui/react';\n\nconst ContactForm = () => {\n    const dispatch = useDispatch();\n    const [name, setName] = useState('');\n    const [number, setNumber] = useState('');\n    const contacts = useSelector(getContacts);\n\n    const handleChange = event => {\n        const { name, value } = event.currentTarget;\n\n        switch (name) {\n            case ('name'):\n                setName(value);\n                break;\n            case ('number'):\n                setNumber(value);\n                break;\n            default:\n                break;\n        }\n    };\n\n    const handleSubmit = event => {\n        event.preventDefault();\n        if (name && number) {\n            if (contacts.find(el => el.name === name)) {\n                return toast.error(`${name} is already in contacts`);\n            }\n            dispatch(addContact({ name, number }));\n            setName('');\n            setNumber('');\n        }\n    }\n\n    return (\n        <ContactFormStyled onSubmit={handleSubmit}>\n            <Heading as='h1'>Phonebook</Heading>\n            <Text fontSize='xl'>Name</Text>\n            <InputStyled\n                type=\"text\"\n                name=\"name\"\n                value={name}\n                onChange={handleChange}\n                pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                required\n            />\n            <Text fontSize='xl'>Phone</Text>\n            <InputStyled\n                type=\"tel\"\n                name=\"number\"\n                value={number}\n                onChange={handleChange}\n                pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                required\n            />\n            <Button colorScheme='blue' type=\"submit\">Add contact</Button>\n        </ContactFormStyled>\n    );\n}\n\nexport default ContactForm;","import { Heading, Input } from '@chakra-ui/react';\nimport styled from '@emotion/styled';\n\nexport const StyledHeading = styled(Heading)`\n    margin-top: 10px;\n`;\n\nexport const StyledInput = styled(Input)`\n    margin-bottom: 10px;\n`;","import { Text } from \"@chakra-ui/react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setFilter } from \"redux/contacts/filterSlice\";\nimport { getFilter } from \"redux/contacts/selectors\";\nimport { StyledHeading, StyledInput } from \"./Filter.styled\";\n\nconst Filter = () => {\n    const dispatch = useDispatch();\n    const filter = useSelector(getFilter);\n\n    const onFilter = event => {\n        dispatch(setFilter(event.target.value));\n    };\n\n    return (\n        <>\n            <StyledHeading as='h2'>Contacts</StyledHeading>\n            <Text fontSize='xl'>Find contacts by name:</Text>\n            <StyledInput\n                size='sm'\n                type=\"text\"\n                name=\"filter\"\n                pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                value={filter.filter}\n                onChange={onFilter}\n                required\n            />\n        </>\n    );\n}\n\nexport default Filter;","import styled from '@emotion/styled';\n\nexport const ContactListStyled = styled.ul`\n`;\n\nexport const ListItem = styled.li`\n    min-width: 200px;\n    display: flex;\n    justify-content: space-between;\n`;","// src/grid.tsx\nimport {\n  chakra,\n  forwardRef\n} from \"@chakra-ui/system\";\nimport { jsx } from \"react/jsx-runtime\";\nvar Grid = forwardRef(function Grid2(props, ref) {\n  const {\n    templateAreas,\n    gap,\n    rowGap,\n    columnGap,\n    column,\n    row,\n    autoFlow,\n    autoRows,\n    templateRows,\n    autoColumns,\n    templateColumns,\n    ...rest\n  } = props;\n  const styles = {\n    display: \"grid\",\n    gridTemplateAreas: templateAreas,\n    gridGap: gap,\n    gridRowGap: rowGap,\n    gridColumnGap: columnGap,\n    gridAutoColumns: autoColumns,\n    gridColumn: column,\n    gridRow: row,\n    gridAutoFlow: autoFlow,\n    gridAutoRows: autoRows,\n    gridTemplateRows: templateRows,\n    gridTemplateColumns: templateColumns\n  };\n  return /* @__PURE__ */ jsx(chakra.div, { ref, __css: styles, ...rest });\n});\nGrid.displayName = \"Grid\";\n\nexport {\n  Grid\n};\n","// src/responsive.ts\nimport { isObject } from \"@chakra-ui/shared-utils\";\nvar breakpoints = Object.freeze([\n  \"base\",\n  \"sm\",\n  \"md\",\n  \"lg\",\n  \"xl\",\n  \"2xl\"\n]);\nfunction mapResponsive(prop, mapper) {\n  if (Array.isArray(prop)) {\n    return prop.map((item) => item === null ? null : mapper(item));\n  }\n  if (isObject(prop)) {\n    return Object.keys(prop).reduce((result, key) => {\n      result[key] = mapper(prop[key]);\n      return result;\n    }, {});\n  }\n  if (prop != null) {\n    return mapper(prop);\n  }\n  return null;\n}\nfunction objectToArrayNotation(obj, bps = breakpoints) {\n  const result = bps.map((br) => {\n    var _a;\n    return (_a = obj[br]) != null ? _a : null;\n  });\n  const lastItem = result[result.length - 1];\n  while (lastItem === null)\n    result.pop();\n  return result;\n}\nfunction arrayToObjectNotation(values, bps = breakpoints) {\n  const result = {};\n  values.forEach((value, index) => {\n    const key = bps[index];\n    if (value == null)\n      return;\n    result[key] = value;\n  });\n  return result;\n}\nfunction isResponsiveObjectLike(obj, bps = breakpoints) {\n  const keys = Object.keys(obj);\n  return keys.length > 0 && keys.every((key) => bps.includes(key));\n}\nvar isCustomBreakpoint = (v) => Number.isNaN(Number(v));\n\nexport {\n  breakpoints,\n  mapResponsive,\n  objectToArrayNotation,\n  arrayToObjectNotation,\n  isResponsiveObjectLike,\n  isCustomBreakpoint\n};\n","import {\n  Grid\n} from \"./chunk-5FO2ZLZM.mjs\";\n\n// src/simple-grid.tsx\nimport {\n  forwardRef,\n  getToken,\n  useTheme\n} from \"@chakra-ui/system\";\nimport { mapResponsive } from \"@chakra-ui/breakpoint-utils\";\nimport { jsx } from \"react/jsx-runtime\";\nvar SimpleGrid = forwardRef(\n  function SimpleGrid2(props, ref) {\n    const { columns, spacingX, spacingY, spacing, minChildWidth, ...rest } = props;\n    const theme = useTheme();\n    const templateColumns = minChildWidth ? widthToColumns(minChildWidth, theme) : countToColumns(columns);\n    return /* @__PURE__ */ jsx(\n      Grid,\n      {\n        ref,\n        gap: spacing,\n        columnGap: spacingX,\n        rowGap: spacingY,\n        templateColumns,\n        ...rest\n      }\n    );\n  }\n);\nSimpleGrid.displayName = \"SimpleGrid\";\nfunction toPx(n) {\n  return typeof n === \"number\" ? `${n}px` : n;\n}\nfunction widthToColumns(width, theme) {\n  return mapResponsive(width, (value) => {\n    const _value = getToken(\"sizes\", value, toPx(value))(theme);\n    return value === null ? null : `repeat(auto-fit, minmax(${_value}, 1fr))`;\n  });\n}\nfunction countToColumns(count) {\n  return mapResponsive(\n    count,\n    (value) => value === null ? null : `repeat(${value}, minmax(0, 1fr))`\n  );\n}\n\nexport {\n  SimpleGrid\n};\n","// src/card-context.tsx\nimport { createStylesContext } from \"@chakra-ui/system\";\nvar [CardStylesProvider, useCardStyles] = createStylesContext(\"Card\");\n\nexport {\n  CardStylesProvider,\n  useCardStyles\n};\n","import {\n  CardStylesProvider\n} from \"./chunk-4DHADF5X.mjs\";\n\n// src/card.tsx\nimport { cx } from \"@chakra-ui/shared-utils\";\nimport {\n  forwardRef,\n  chakra,\n  omitThemingProps,\n  useMultiStyleConfig\n} from \"@chakra-ui/system\";\nimport { jsx } from \"react/jsx-runtime\";\nvar Card = forwardRef(function Card2(props, ref) {\n  const {\n    className,\n    children,\n    direction = \"column\",\n    justify,\n    align,\n    ...rest\n  } = omitThemingProps(props);\n  const styles = useMultiStyleConfig(\"Card\", props);\n  return /* @__PURE__ */ jsx(\n    chakra.div,\n    {\n      ref,\n      className: cx(\"chakra-card\", className),\n      __css: {\n        display: \"flex\",\n        flexDirection: direction,\n        justifyContent: justify,\n        alignItems: align,\n        position: \"relative\",\n        minWidth: 0,\n        wordWrap: \"break-word\",\n        ...styles.container\n      },\n      ...rest,\n      children: /* @__PURE__ */ jsx(CardStylesProvider, { value: styles, children })\n    }\n  );\n});\n\nexport {\n  Card\n};\n","import {\n  useCardStyles\n} from \"./chunk-4DHADF5X.mjs\";\n\n// src/card-body.tsx\nimport { cx } from \"@chakra-ui/shared-utils\";\nimport { forwardRef, chakra } from \"@chakra-ui/system\";\nimport { jsx } from \"react/jsx-runtime\";\nvar CardBody = forwardRef(function CardBody2(props, ref) {\n  const { className, ...rest } = props;\n  const styles = useCardStyles();\n  return /* @__PURE__ */ jsx(\n    chakra.div,\n    {\n      ref,\n      className: cx(\"chakra-card__body\", className),\n      __css: styles.body,\n      ...rest\n    }\n  );\n});\n\nexport {\n  CardBody\n};\n","import { loader } from 'components/Loader/Loader';\nimport { ContactListStyled, ListItem } from './ContactList.styled';\nimport { useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { deleteContact, fetchContacts } from 'redux/contacts/operations';\nimport { getContacts, getError, getFilter, getIsLoading } from 'redux/contacts/selectors';\nimport { Button, Card, CardBody, SimpleGrid, Text } from '@chakra-ui/react';\n\nconst ContactList = () => {\n    const dispatch = useDispatch();\n    const contacts = useSelector(getContacts);\n    const isLoading = useSelector(getIsLoading);\n    const error = useSelector(getError);\n    const filter = useSelector(getFilter);\n\n    useEffect(() => {\n        dispatch(fetchContacts());\n    }, [dispatch]);\n    \n    const filteredContacts = contacts.filter(contact => contact.name.toLowerCase().includes(filter.toLowerCase()));\n\n\n    return (\n        <ContactListStyled>\n            {isLoading && !error && loader}\n            <SimpleGrid spacing={4} templateColumns='repeat(auto-fill, minmax(200px, 1fr))'>\n                {filteredContacts.map(({ name, number, id }) => (\n                    <ListItem key={id}>\n                        <Card>\n                            <CardBody>\n                                <Text fontSize='lg'><strong>&#8226;</strong>{name}: {number}</Text>\n                                <Button colorScheme='blue' size='xs'\n                                    type=\"button\"\n                                    onClick={() => dispatch(deleteContact(id))}\n                                >Delete</Button>\n                            </CardBody>\n                        </Card>\n                    \n                    </ListItem>\n                ))}\n            </SimpleGrid>\n        </ContactListStyled>\n    );\n}\n\nexport default ContactList;","import { useSelector } from 'react-redux';\nimport { ContactForm, ContactList, Filter } from 'components';\nimport { getIsLoading } from 'redux/contacts/selectors';\nimport { loader } from 'components/Loader/Loader';\nimport { Helmet, HelmetProvider } from 'react-helmet-async';\n\nexport default function Contacts() {\n  const isLoading = useSelector(getIsLoading);\n\n  return (\n    <>\n      <HelmetProvider>\n        <Helmet>\n          <title>Your contacts</title>\n        </Helmet>\n        <ContactForm />\n        <Filter />\n        <div>{isLoading && loader}</div>\n        <ContactList />\n      </HelmetProvider>\n    </>\n  );\n}\n"],"names":["ContactFormStyled","styled","InputStyled","Input","getContacts","state","contacts","items","getIsLoading","isLoading","getError","error","getFilter","filter","Heading","forwardRef","props","ref","styles","useStyleConfig","omitThemingProps","rest","className","jsx","chakra","cx","__css","displayName","Text","align","decoration","casing","aliasedProps","object","clone","Object","assign","key","compact","textAlign","textDecoration","textTransform","dispatch","useDispatch","useState","name","setName","number","setNumber","useSelector","handleChange","event","currentTarget","value","onSubmit","preventDefault","find","el","toast","addContact","as","fontSize","type","onChange","pattern","title","required","colorScheme","StyledHeading","StyledInput","size","setFilter","target","ContactListStyled","ListItem","Grid","templateAreas","gap","rowGap","columnGap","column","row","autoFlow","autoRows","templateRows","autoColumns","templateColumns","display","gridTemplateAreas","gridGap","gridRowGap","gridColumnGap","gridAutoColumns","gridColumn","gridRow","gridAutoFlow","gridAutoRows","gridTemplateRows","gridTemplateColumns","freeze","mapResponsive","prop","mapper","Array","isArray","map","item","isObject","keys","reduce","result","SimpleGrid","columns","spacingX","spacingY","spacing","minChildWidth","theme","useTheme","width","n","_value","getToken","widthToColumns","createStylesContext","CardStylesProvider","useCardStyles","Card","children","direction","justify","useMultiStyleConfig","flexDirection","justifyContent","alignItems","position","minWidth","wordWrap","container","CardBody","body","useEffect","fetchContacts","filteredContacts","contact","toLowerCase","includes","loader","id","onClick","deleteContact","Contacts"],"sourceRoot":""}